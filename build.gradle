plugins {
    id "me.champeau.gradle.jmh" version "0.4.5" apply false
}

allprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    // In this section you declare where to find the dependencies of your project
    repositories {
        jcenter()
        maven {
            url ritualsMavenServer
            credentials {
                username ritualsMavenUser
                password ritualsMavenPassword
            }
        }
    }
    
    // In this section you declare the dependencies for your production and test code
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.21'
        testCompile 'junit:junit:4.12'
    }
    
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId "com.ritualsoftheold"
                artifactId project.name
                version project.property("version")
    
                from components.java
    
                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
        
        repositories {
            maven {
                url ritualsMavenServer
                credentials {
                    username ritualsMavenUser
                    password ritualsMavenPassword
                }
            }
        }
    }
}

// Define JMH for all subprojects that need it
allprojects.findAll { it.name in ['terra-meshgen'] }. each { p ->
    configure(p) {
        apply plugin: "me.champeau.gradle.jmh"

        dependencies {
            jmh 'org.openjdk.jmh:jmh-core:1.20'
            jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
        }
        
        tasks.getByName('jmhJar').doFirst() {duplicatesStrategy(DuplicatesStrategy.EXCLUDE)}
        
        jmh {
            duplicateClassesStrategy = 'exclude' // See https://github.com/melix/jmh-gradle-plugin/issues/125
            fork = 1 // Fork only once to save time
        }
    }
}